var d=Object.defineProperty,P=Object.defineProperties;var b=Object.getOwnPropertyDescriptors;var f=Object.getOwnPropertySymbols;var w=Object.prototype.hasOwnProperty,R=Object.prototype.propertyIsEnumerable;var S=(i,t,e)=>t in i?d(i,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):i[t]=e,o=(i,t)=>{for(var e in t||(t={}))w.call(t,e)&&S(i,e,t[e]);if(f)for(var e of f(t))R.call(t,e)&&S(i,e,t[e]);return i},I=(i,t)=>P(i,b(t)),N=i=>d(i,"__esModule",{value:!0});var v=(i,t)=>{N(i);for(var e in t)d(i,e,{get:t[e],enumerable:!0})};v(exports,{PermissionState:()=>a,default:()=>k});var y={apiHost:"https://api.engagespot.co/v3",wssHost:"wss://rtm.engagespot.co",wssPort:80},g=y;var A=()=>{let i=navigator.userAgent,t=i.indexOf("Chrome")>-1,e=i.indexOf("MSIE")>-1||i.indexOf("rv:")>-1,s=i.indexOf("Firefox")>-1,r=i.indexOf("Safari")>-1;t&&r&&(r=!1);let n=i.indexOf("OP")>-1;if(t&&n&&(t=!1),t)return"chrome";if(e)return"ie";if(s)return"firefox";if(r)return"safari";if(n)return"opera"},O=i=>{if(!i)throw"urlBase64ToUInt8Array function expects atleast one parameter.";console.log(i);let t="=".repeat((4-i.length%4)%4),e=(i+t).replace(/-/g,"+").replace(/_/g,"/"),s=window.atob(e);return Uint8Array.from([...s].map(r=>r.charCodeAt(0)))},E={findBrowser:A,urlBase64ToUInt8Array:O};function u(i){let t={method:i.method,cache:"no-cache",headers:o({"Content-Type":"application/json"},i.headers)};return i.body!==null&&(t.body=JSON.stringify(i.body)),fetch(i.url,t).then(async e=>{e.ok||await T(e);try{return await e.json()}catch{return null}})}async function T(i){let t;try{let{error:e="Unknown error",message:s="No description"}=await i.json();t=`Unexpected status code ${i.status}: ${e}, ${s}`}catch{t=`Unexpected status code ${i.status}: Cannot parse error response`}throw new Error(t)}var l=class{constructor(t,e){this.message=null;this.icon=null;this.url=null;this.seenAt=null;this.clickedAt=null;this.createdAt=null;this._client=t,this.id=e.id,this.title=e.title,this.message=e.message,this.icon=e.icon,this.url=e.url,this.seenAt=e.seenAt,this.clickedAt=e.clickedAt,this.createdAt=e.createdAt}async markAsClicked(){var e;(e=this._client.eventListenerStore)==null||e.NOTIFICATION_CLICKED.forEach(s=>{s(this)});let t={url:this._client.baseURL+"/notifications/"+this.id+"/click",method:"POST",headers:o({"Content-Type":"application/json","X-ENGAGESPOT-API-KEY":this._client.apiKey,"X-ENGAGESPOT-USER-ID":this._client.userId},this._client.userSignature&&{"X-ENGAGESPOT-USER-SIGNATURE":this._client.userSignature})};try{return await u(t)?this:!1}catch(s){throw new Error(s)}}};var p=class{constructor(t){this.client=t,this.unreadCount=0,this.totalCount=0,this.data=[],this.currentPage=1,this.itemsPerPage=15,this.totalPages=0}async fetch(t=1,e=15){let s={url:this.client.baseURL+"/notifications?pageNo="+this.currentPage+"&limit="+this.itemsPerPage,method:"GET",headers:o({"Content-Type":"application/json","X-ENGAGESPOT-API-KEY":this.client.apiKey,"X-ENGAGESPOT-USER-ID":this.client.userId},this.client.userSignature&&{"X-ENGAGESPOT-USER-SIGNATURE":this.client.userSignature})},r=await u(s);return this.unreadCount=r.unreadCount,this.totalCount=r.pagination.totalCount,this.currentPage=t,this.itemsPerPage=e,this.totalPages=Math.ceil(this.totalCount/this.itemsPerPage),r.data.forEach(n=>{let m=new l(this.client,{id:n.id,title:n.title,message:n.message,icon:n.icon,url:n.url,createdAt:n.createdAt,seenAt:n.seenAt,clickedAt:n.clickedAt});this.data.push(m)}),this}};var a;(function(s){s[s.PERMISSION_REQUIRED=0]="PERMISSION_REQUIRED",s[s.PERMISSION_GRANTED=1]="PERMISSION_GRANTED",s[s.PERMISSION_DENIED=2]="PERMISSION_DENIED"})(a||(a={}));var h=class{constructor(t,e){this.SERVICE_WORKER_URL="/service-worker.js?sdkVersion=3.0.0";this.userSignature=null;this.instanceState="none";this.endPoint=null;this.socket=null;this.enableNonHttpsWebPush=!1;this.unreadCount=0;this.deviceId=null;this.hideBranding=!1;this.serviceWorkerRegistration=null;this.publicKey="";this.subscribableEvents=["REALTIME_NOTIFICATION_RECEIVED","NOTIFICATION_CLICKED"];this.eventListenerStore=null;if(x(t),this.apiKey=t,!e)throw"You must pass an options object when you instantiate Engagespot.";if(!e.userId)throw"You must pass userId when you instantiate Engagespot.";this.userId=e.userId,e.userSignature&&(this.userSignature=e.userSignature),e.enableNonHttpsWebPush&&(this.enableNonHttpsWebPush=e.enableNonHttpsWebPush),e.serviceWorkerRegistration&&(this.serviceWorkerRegistration=e.serviceWorkerRegistration),e.endPointOverride&&(this.endPoint=e.endPointOverride),this._ready=this.init()}async _resolveInstanceState(){await this._ready}async isReady(){try{return await this._resolveInstanceState(),!0}catch{return!1}}async init(){this.deviceId===null&&(this.deviceId=this.getDeviceId(),this.enableNonHttpsWebPush||(this.serviceWorkerRegistration?await window.navigator.serviceWorker.ready:this.serviceWorkerRegistration=await this.getServiceWorkerRegistration()),await this.connect())}async connect(){this.instanceState="connecting",this.deviceId||(this.deviceId=this.createNewDevice());let t={url:this.baseURL+"/sdk/connect",method:"POST",body:{deviceType:"browser",browserType:E.findBrowser()},headers:I(o({"Content-Type":"application/json","X-ENGAGESPOT-API-KEY":this.apiKey,"X-ENGAGESPOT-USER-ID":this.userId},this.userSignature&&{"X-ENGAGESPOT-USER-SIGNATURE":this.userSignature}),{"X-ENGAGESPOT-DEVICE-ID":this.deviceId})},e=await u(t);this.unreadCount=e.unreadCount,this.hideBranding=e.app.hideBranding,this.publicKey=e.app.publicKey;try{this.realtimeConnect()}catch(s){Promise.reject(new Error(s))}this.instanceState="connected",Promise.resolve(this.instanceState)}realtimeConnect(){this.socket=new WebSocket(g.wssHost),this.socket.onopen=t=>{if(this.instanceState="connected",!this.socket)throw new Error("Something wrong happened with websocket connection");this.socket.send(JSON.stringify(this.deviceId))}}handleIncomingRealtimeMessage(t){if(!this.socket)throw new Error("A socket connection is not active");JSON.parse(t)=="__ping__"&&this.socket.send(JSON.stringify({uuid:this.deviceId,msg:"__pong__"}))}getNotificationList(){return new p(this)}async httpsWebPushSubscribe(){if(await this._resolveInstanceState(),this.checkWebPushSupport(),await this.getWebPushRegistrationState()!=a.PERMISSION_DENIED){if(await this.askWebPushPermission()!=="granted")return;let s=await this.getWebPushSubscription(this.publicKey);await this.attachPushSubscription(s)}}async getServiceWorkerRegistration(){if((await fetch(this.SERVICE_WORKER_URL)).status!==200)throw`Engagespot SDK initialization failed. Service worker missing: No file found at /service-worker.js.
          If you prefer to use non-https web push subscription, enable enableNonHttpsWebPush in options`;return window.navigator.serviceWorker.register(this.SERVICE_WORKER_URL,{updateViaCache:"none"}),window.navigator.serviceWorker.ready}async askWebPushPermission(){return new Promise(function(t,e){let s=Notification.requestPermission(function(r){t(r)});s&&s.then(t,e)})}async getWebPushSubscription(t){if(!this.serviceWorkerRegistration)throw new Error("A service worker must be registered before push can be subscribed");try{return await this.clearWebPushSubscription(),await this.serviceWorkerRegistration.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:E.urlBase64ToUInt8Array(this.publicKey)})}catch(e){return Promise.reject(e)}}async clearWebPushSubscription(){return navigator.serviceWorker.ready.then(t=>t.pushManager.getSubscription()).then(t=>{t&&t.unsubscribe()})}checkWebPushSupport(){if(!("serviceWorker"in navigator))throw new Error("Engagespot Web Push is not support in this browser (Service Workers not supported)");if(!("PushManager"in window))throw new Error("Engagespot Web Push is not support in this browser (Service Workers not supported)")}get baseURL(){return this.endPoint!==null?this.endPoint:g.apiHost}async getWebPushRegistrationState(){return await this._resolveInstanceState(),Notification.permission==="denied"?a.PERMISSION_DENIED:Notification.permission==="granted"?a.PERMISSION_GRANTED:a.PERMISSION_REQUIRED}async attachPushSubscription(t){return await this._resolveInstanceState(),fetch(this.baseURL+"/devices/"+this.deviceId+"/webPushSubscription",{method:"POST",cache:"no-cache",body:JSON.stringify(t),headers:{"Content-Type":"application/json","X-ENGAGESPOT-API-KEY":this.apiKey,"X-ENGAGESPOT-USER-ID":this.userId,"X-ENGAGESPOT-USER-SIGNATURE":this.userSignature,"X-ENGAGESPOT-DEVICE-ID":this.deviceId}}).then(e=>e.json()).then(e=>!0).catch(e=>{let s=new Error("Failed to register push notification with Engagespot server - "+e);Promise.reject(s)})}createNewDevice(){let t="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){let s=Math.random()*16|0;return(e=="x"?s:s&3|8).toString(16)});return localStorage.setItem("_engagespotDeviceId",t),t}getDeviceId(){return localStorage.getItem("_engagespotDeviceId")}async markNotificationAsClicked(t){var r;if(await this._resolveInstanceState(),(r=this.eventListenerStore)==null||r.NOTIFICATION_CLICKED.forEach(n=>{n(t)}),!t)throw new Error("Expecting id of the notification to be deleted");let e={url:this.baseURL+"/notifications/"+t+"/click",method:"GET",headers:o({"Content-Type":"application/json","X-ENGAGESPOT-API-KEY":this.apiKey,"X-ENGAGESPOT-USER-ID":this.userId},this.userSignature&&{"X-ENGAGESPOT-USER-SIGNATURE":this.userSignature})};return await u(e)}async deleteNotification(t){return await this._resolveInstanceState(),fetch(this.baseURL+"/notifications/"+t,{method:"DELETE",cache:"no-cache",headers:{"Content-Type":"application/json","X-ENGAGESPOT-API-KEY":this.apiKey,"X-ENGAGESPOT-USER-ID":this.userId,"X-ENGAGESPOT-USER-SIGNATURE":this.userSignature}}).then(e=>e.json()).then(e=>!0).catch(e=>{let s=new Error("Failed to delete notification - "+e);Promise.reject(s)})}onNotificationReceived(t){var e;return(e=this.eventListenerStore)==null||e.REALTIME_NOTIFICATION_RECEIVED.push(t),!0}onNotificationClicked(t){var e;return(e=this.eventListenerStore)==null||e.NOTIFICATION_CLICKED.push(t),!0}};h.isReady=!1;function x(i){if(i==null)throw"You must pass your API key when you instantiate Engagespot."}var k=h;0&&(module.exports={PermissionState});
