"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8190],{3245:function(e,t,n){var a=n(7378);t.Z=function(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",hidden:n,className:o},t)}},9664:function(e,t,n){n.d(t,{Z:function(){return c}});var a=n(5773),o=n(7378),i=n(362),r=n(16),s=n(8944),l="tabItem_WhCL";function u(e){var t,n;const{lazy:i,block:u,defaultValue:c,values:p,groupId:d,className:m}=e,h=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=p??h.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),g=(0,r.lx)(f,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===c?c:c??(null==(t=h.find((e=>e.props.default)))?void 0:t.props.value)??(null==(n=h[0])?void 0:n.props.value);if(null!==v&&!f.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:b,setTabGroupChoices:y}=(0,r.UB)(),[E,k]=(0,o.useState)(v),N=[],{blockElementScrollPositionUntilNextRender:w}=(0,r.o5)();if(null!=d){const e=b[d];null!=e&&e!==E&&f.some((t=>t.value===e))&&k(e)}const P=e=>{const t=e.currentTarget,n=N.indexOf(t),a=f[n].value;a!==E&&(w(t),k(a),null!=d&&y(d,a))},T=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=N.indexOf(e.currentTarget)+1;n=N[t]||N[0];break}case"ArrowLeft":{const t=N.indexOf(e.currentTarget)-1;n=N[t]||N[N.length-1];break}}null==(t=n)||t.focus()};return o.createElement("div",{className:"tabs-container"},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":u},m)},f.map((e=>{let{value:t,label:n,attributes:i}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:E===t?0:-1,"aria-selected":E===t,key:t,ref:e=>N.push(e),onKeyDown:T,onFocus:P,onClick:P},i,{className:(0,s.Z)("tabs__item",l,null==i?void 0:i.className,{"tabs__item--active":E===t})}),n??t)}))),i?(0,o.cloneElement)(h.filter((e=>e.props.value===E))[0],{className:"margin-vert--md"}):o.createElement("div",{className:"margin-vert--md"},h.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==E})))))}function c(e){const t=(0,i.Z)();return o.createElement(u,(0,a.Z)({key:String(t)},e))}},5005:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return c}});var a=n(5773),o=(n(7378),n(5318)),i=n(9664),r=n(3245);const s={sidebar_position:5},l="Using API to Send Notifications",u={unversionedId:"introduction/using-api-to-send-notifications",id:"introduction/using-api-to-send-notifications",title:"Using API to Send Notifications",description:"In the previous chapter, we learned how to send a notification directly from the Engagespot dashboard. But that is not always the best solution. In most cases, notifications should be sent programatically from your code.",source:"@site/docs/introduction/using-api-to-send-notifications.mdx",sourceDirName:"introduction",slug:"/introduction/using-api-to-send-notifications",permalink:"/docs/introduction/using-api-to-send-notifications",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/introduction/using-api-to-send-notifications.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Sending Notification From Engagespot Dashboard",permalink:"/docs/introduction/sending-notification-from-dashboard"},next:{title:"Advanced Setup",permalink:"/docs/introduction/whats-next"}},c=[{value:"Consuming the REST API",id:"consuming-the-rest-api",children:[],level:2},{value:"Detailed API Guide",id:"detailed-api-guide",children:[],level:2},{value:"SDKs",id:"sdks",children:[],level:2}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"using-api-to-send-notifications"},"Using API to Send Notifications"),(0,o.kt)("p",null,"In the previous chapter, we learned how to send a notification directly from the Engagespot dashboard. But that is not always the best solution. In most cases, notifications should be sent programatically from your code."),(0,o.kt)("p",null,"For example, if you're building a social network and you want to notify your users when another user comments on their photo, you need to integrate Engagespot API in your program, right?"),(0,o.kt)("p",null,"Well, luckily, it's simple. Let's quickly learn how to send the below notification via Engagespot REST API."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://i.postimg.cc/bYDBkf8Y/Screen-Shot-2022-02-05-at-12-14-58-PM.png",alt:"img"})),(0,o.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Before you try to send notifications via the REST API, make sure you're authenticating your app users with Engagespot via front-end integration.\nRead Quick start guide for ",(0,o.kt)("a",{parentName:"p",href:"./quick-setup-javascript"},"Javascript"),", or ",(0,o.kt)("a",{parentName:"p",href:"./android-ios-quick-start"},"Android/iOS")," to learn more."),(0,o.kt)("p",{parentName:"div"},"Notifications sent to a recipient who has not yet identified by Engagespot will be discarded."))),(0,o.kt)("h2",{id:"consuming-the-rest-api"},"Consuming the REST API"),(0,o.kt)("p",null,"To send notifications, you should send a ",(0,o.kt)("inlineCode",{parentName:"p"},"POST")," request to ",(0,o.kt)("inlineCode",{parentName:"p"},"https://api.engagespot.co/v3/notifications")," API with the following details."),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"node",label:"Node",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"var axios = require('axios');\n\naxios.post(\n  'https://api.engagespot.co/v3/notifications',\n  {\n    notification: {\n      title: 'Rose accepted your friend request',\n    },\n    recipients: ['jack@example.com'],\n  },\n  {\n    headers: {\n      'X-ENGAGESPOT-API-KEY': 'YOUR_ENGAGESPOT_API_KEY',\n      'X-ENGAGESPOT-API-SECRET': 'YOUR_ENGAGESPOT_API_SECRET',\n    },\n  }\n);\n"))),(0,o.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"curl --location --request POST 'https://api.engagespot.co/v3/notifications' \\\n--header 'X-ENGAGESPOT-API-KEY: YOUR_ENGAGESPOT_API_KEY' \\\n--header 'X-ENGAGESPOT-API-SECRET: YOUR_ENGAGESPOT_API_SECRET' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"notification\": {\n        \"title\": \"Rose accepted your friend request\"\n    },\n    \"recipients\": [\n        \"jack@example.com\"\n    ]\n}'\n"))),(0,o.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import requests\nimport json\n\nurl = "https://api.engagespot.co/v3/notifications"\n\npayload = json.dumps({\n  "notification": {\n    "title": "Rose accepted your friend request"\n  },\n  "recipients": [\n    "jack@example.com"\n  ]\n})\nheaders = {\n  \'X-ENGAGESPOT-API-KEY\': \'YOUR_ENGAGESPOT_API_KEY\',\n  \'X-ENGAGESPOT-API-SECRET\': \'YOUR_ENGAGESPOT_API_SECRET\',\n  \'Content-Type\': \'application/json\'\n}\n\nresponse = requests.request("POST", url, headers=headers, data=payload)\n\nprint(response.text)\n\n')))),(0,o.kt)("p",null,"Where ",(0,o.kt)("inlineCode",{parentName:"p"},"recipients")," is the list of users who should receive this notification. Wondering how Engagespot identifies your users? Remember you had passed the email-id (or any unique id) of your users in the front-end SDK? That's how Engagespot identifies your users and sends the notification to them, no matter how many devices they are using."),(0,o.kt)("h2",{id:"detailed-api-guide"},"Detailed API Guide"),(0,o.kt)("p",null,"There are other parameters you can pass to this send Notification API. You can learn more about them from the ",(0,o.kt)("a",{parentName:"p",href:"/docs/rest-api#tag/Notifications/paths/~1v3~1notifications/post"},"REST API reference")," page."),(0,o.kt)("h2",{id:"sdks"},"SDKs"),(0,o.kt)("p",null,"We currently have wrappers in the following languages for communicatung with the REST API."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/Engagespot/engagespot-node"},"Node.js SDK")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/Jobin-Jas/jobin-engagespot"},"PHP Laravel")," (Unofficial)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/ssiyad/engagespot-go"},"Go"),"(Unofficial)")))}d.isMDXComponent=!0},5318:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7378);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=o,h=d["".concat(l,".").concat(m)]||d[m]||p[m]||i;return n?a.createElement(h,r(r({ref:t},c),{},{components:n})):a.createElement(h,r({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var u=2;u<i;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);