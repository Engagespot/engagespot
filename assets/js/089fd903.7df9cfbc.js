"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6378],{85388:function(n,t,e){e.r(t),e.d(t,{assets:function(){return l},contentTitle:function(){return a},default:function(){return c},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return p}});var i=e(52685),r=(e(27378),e(35318));const o={sidebar_position:1},a="Using React Component",s={unversionedId:"javascript-guide/using-react-component",id:"javascript-guide/using-react-component",title:"Using React Component",description:"Engagespot React component helps you to build a notification feed for your React.js app. This library includes React components to build a Notification Inbox component in your app.",source:"@site/docs/javascript-guide/using-react-component.md",sourceDirName:"javascript-guide",slug:"/javascript-guide/using-react-component",permalink:"/docs/javascript-guide/using-react-component",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/javascript-guide/using-react-component.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Using Angular Package",permalink:"/docs/javascript-guide/using-angular-package"},next:{title:"Using Vue.js Package",permalink:"/docs/javascript-guide/using-vuejs-package"}},l={},p=[{value:"Quick Setup",id:"quick-setup",level:2},{value:"Props",id:"props",level:2},{value:"<code>EngagespotProps</code> interface",id:"engagespotprops-interface",level:3},{value:"Available Themeing Options",id:"available-themeing-options",level:3},{value:"Extending Components",id:"extending-components",level:2},{value:"Rendering a custom notification item",id:"rendering-a-custom-notification-item",level:3}],g={toc:p};function c(n){let{components:t,...e}=n;return(0,r.kt)("wrapper",(0,i.Z)({},g,e,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"using-react-component"},"Using React Component"),(0,r.kt)("p",null,"Engagespot React component helps you to build a notification feed for your React.js app. This library includes React components to build a Notification Inbox component in your app."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://i.postimg.cc/BbPF7Cpk/notifications.png",alt:"Notification Inbox Preview"})),(0,r.kt)("p",null,"Something like this."),(0,r.kt)("h2",{id:"quick-setup"},"Quick Setup"),(0,r.kt)("p",null,"You can add a notification feed to your React app in minutes with the pre-built UI Components and APIs powered by Engagespot."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @engagespot/react-component\n")),(0,r.kt)("p",null,"Then render ",(0,r.kt)("inlineCode",{parentName:"p"},"Engagespot")," component where you want the bell icon to appear."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Engagespot } from \'@engagespot/react-component\';\n\n<Engagespot apiKey="ENGAGESPOT_API_KEY" userId="youruser@example.com" />;\n')),(0,r.kt)("p",null,"You can find your ENGAGESPOT_API_KEY from your ",(0,r.kt)("a",{parentName:"p",href:"https://portal.engagespot.co"},"Engagespot dashboard"),". As explained in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/introduction/understanding-concepts"},"basic concepts")," chapter, ",(0,r.kt)("inlineCode",{parentName:"p"},"userId")," should be any value to uniquely identify your app's users. It can be their email id, or UUID or a numerical id from your database."),(0,r.kt)("h2",{id:"props"},"Props"),(0,r.kt)("p",null,"The Engagespot notification react component can be customized to suit your application's look and feel. The ",(0,r.kt)("inlineCode",{parentName:"p"},"Engagespot")," component accepts the following props (",(0,r.kt)("inlineCode",{parentName:"p"},"EngagespotProps")," interface)."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"apiKey"),(0,r.kt)("td",{parentName:"tr",align:null},"Your ",(0,r.kt)("inlineCode",{parentName:"td"},"ENGAGESPOT_API_KEY"),", which you can find in your Engagespot dashboard."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"userId"),(0,r.kt)("td",{parentName:"tr",align:null},"Unique id to identify your users"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"hideJumpToTop"),(0,r.kt)("td",{parentName:"tr",align:null},'Hides the "Jump to top" button'),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"renderNotificationIcon"),(0,r.kt)("td",{parentName:"tr",align:null},"Custom notification bell icon"),(0,r.kt)("td",{parentName:"tr",align:null},"Component")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"feedItemPlaceholderImage"),(0,r.kt)("td",{parentName:"tr",align:null},"URL of Icon to be displayed if notification image is empty"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"renderEmptyPlaceholderImage"),(0,r.kt)("td",{parentName:"tr",align:null},"Component to show when notification feed is empty"),(0,r.kt)("td",{parentName:"tr",align:null},"Component")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"headerText"),(0,r.kt)("td",{parentName:"tr",align:null},"Text that will be shown on Notification feed title"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"theme"),(0,r.kt)("td",{parentName:"tr",align:null},"Object with multiple properties to customize the look and feel of notification feed."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ThemeOverrides"))))),(0,r.kt)("h3",{id:"engagespotprops-interface"},(0,r.kt)("inlineCode",{parentName:"h3"},"EngagespotProps")," interface"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"interface EngagespotProps {\n  theme?: ThemeOverrides;\n  panelOpenByDefault?: boolean;\n  panelOnly?: boolean;\n  feedItemPlaceholderImage?: string;\n  hideNotificationAvatar?: boolean;\n  hideJumpToTop?: boolean;\n  headerText?: string;\n  renderFooterContent?: customRenderFn;\n  renderNotificationIcon?: customRenderFn;\n  renderEmptyPlaceholderImage?: customRenderFn;\n  renderNotificationContent?: customRenderFn<customNotificationContentType>;\n  renderNotificationBody?: customRenderFn<customNotificationContentType>;\n  onFeedItemClick?: (evt, payload: ClickableNotificationPayload) => void;\n  headerDropdownItems?: DropdownMenuProps['items'];\n}\n")),(0,r.kt)("h3",{id:"available-themeing-options"},"Available Themeing Options"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"theme")," parameter is of ",(0,r.kt)("inlineCode",{parentName:"p"},"ThemeOverrides")," interface. You can customize pretty much every element of your notification center."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"interface ThemeOverrides = {\n\n    colors: {\n        brandingPrimary: string;\n        colorPrimary: string;\n        colorSecondary: string;\n    };\n    panel: {\n        boxShadow: string;\n        width: string;\n        height: string;\n        borderBottomLeftRadius: string;\n        borderBottomRightRadius: string;\n        borderTopLeftRadius: string;\n        borderTopRightRadius: string;\n        arrowSize: string;\n        arrowInset: string;\n    };\n    feed: {\n        background: string;\n        placeholderTextColor: string;\n        height: string;\n        placeholderTextSize: string;\n        placeholderMargin: string;\n        placeholderFontWeight: string;\n    };\n    feedItem: {\n        border: string;\n        background: string;\n        notificationDot: string;\n        hoverBackground: string;\n        headerColor: string;\n        descriptionColor: string;\n        dateColor: string;\n        placeHolderBackground: string;\n        placeHolderGradient: string;\n        height: string;\n        padding: string;\n        placeholderTextSize: string;\n        notificationDotSize: string;\n        imageSize: string;\n        imageRadius: string;\n        hoverTransition: string;\n        textContentPadding: string;\n        textContentMargin: string;\n        headerFontWeight: string;\n        headerSize: string;\n        headerPadding: string;\n        descriptionSize: string;\n        descriptionPadding: string;\n        dateSize: string;\n        menuMargin: string;\n    };\n    notificationButton: {\n        background: string;\n        hoverBackground: string;\n        iconFill: string;\n        floatingButtonShadow: string;\n        iconSize: string;\n        outline: string;\n        margin: string;\n        padding: string;\n        borderWidth: string;\n        normalButtonRadius: string;\n        floatingButtonRadius: string;\n        transition: string;\n    };\n    unreadBadgeCount: {\n        background: string;\n        color: string;\n        borderRadius: string;\n        fontSize: string;\n        inset: string;\n        size: string;\n    };\n    dropdown: {\n        iconFill: string;\n        background: string;\n        hoverBackground: string;\n        menuBackground: string;\n        menuShadow: string;\n        menuItemTextColor: string;\n        menuItemHoverBackground: string;\n        iconWidth: string;\n        iconHeight: string;\n        margin: string;\n        padding: string;\n        borderWidth: string;\n        outline: string;\n        transition: string;\n        menuBorderRadius: string;\n        menuItemPadding: string;\n    };\n    jumpToTop: {\n        background: string;\n        iconFill: string;\n        shadow: string;\n        iconSize: string;\n        inset: string;\n        borderRadius: string;\n        padding: string;\n        margin: string;\n        transition: string;\n    };\n    header: {\n        fontColor: string;\n        closeButtonBackground: string;\n        fontSize: string;\n        fontWeight: string;\n        height: string;\n        padding: string;\n        closeButtonOutline: string;\n        closeButtonPadding: string;\n        closeButtonFontSize: string;\n        closeButtonMargin: string;\n    };\n    footer: {\n        background: string;\n        fontColor: string;\n        preferenceButtonColor: string;\n        border: string;\n        preferenceButtonHoverBackground: string;\n        fontWeight: string;\n        height: string;\n        padding: string;\n        fontSize: string;\n        linkMargin: string;\n        linkSize: string;\n        preferenceButtonMargin: string;\n        preferenceButtonSize: string;\n        preferenceButtonPadding: string;\n        preferenceButtonHoverTransition: string;\n        linkRadius: string;\n    };\n    preference: {\n        fontColor: string;\n        background: string;\n        height: string;\n        fontWeight: string;\n        padding: string;\n    };\n    preferenceModal: {\n        overlayBackground: string;\n        headingColor: string;\n        background: string;\n        closeButtonColor: string;\n        textPrimaryColor: string;\n        textSecondaryColor: string;\n        buttonPrimaryColor: string;\n        buttonPrimaryBackgroundColor: string;\n        buttonPrimaryHoverBackgroundColor: string;\n        buttonSecondaryColor: string;\n        buttonSecondaryBackgroundColor: string;\n        buttonSecondaryHoverBackgroundColor: string;\n        overlayOpacity: string;\n        height: string;\n        backdropFilter: string;\n        borderRadius: string;\n        padding: string;\n        textAlign: string;\n        headerMargin: string;\n        headerFontSize: string;\n        closeButtonSize: string;\n        textPrimaryMargin: string;\n        textPrimaryFontSize: string;\n        textSecondaryMargin: string;\n        textSecondaryFontSize: string;\n        primaryButtonFontWeight: string;\n        primaryButtonPadding: string;\n        primaryButtonBorderRadius: string;\n        primaryButtonMargin: string;\n        primaryButtonTransition: string;\n    }\n}\n")),(0,r.kt)("p",null,"For example, if you want to change the primary colors of your notification feed,"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import {Engagespot} from \'@engagespot/react-component\';\n\nconst theme = {\n    colors: {\n        colorPrimary: "#0971f1";\n    }\n}\n\n<Engagespot\n  apiKey = "ENGAGESPOT_API_KEY"\n  userId = "youruser@example.com"\n  theme = {theme}\n/>\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You can check out ",(0,r.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/engagespot-react-component-example-c8udz?file=/src/App.tsx"},"examples")," in Codesandbox to learn how to customize different elements of the notification inbox component.")),(0,r.kt)("h2",{id:"extending-components"},"Extending Components"),(0,r.kt)("p",null,"Engagespot React library allows you to customize the pre-built UI components to match your needs and requirements. Let's look at few customization options available."),(0,r.kt)("h3",{id:"rendering-a-custom-notification-item"},"Rendering a custom notification item"),(0,r.kt)("p",null,"A notification item is an individual notification component in the notification center. You can completely customize it using the ",(0,r.kt)("inlineCode",{parentName:"p"},"renderNotificationBody")," property which accepts a call back function with the ",(0,r.kt)("inlineCode",{parentName:"p"},"notification")," item. The function should return a custom React component which will be rendered instead of the default notification item component."),(0,r.kt)("p",null,"For example, you can render a custom notification item like the one below -"),(0,r.kt)("img",{src:"https://engagespotcdn3.s3.amazonaws.com/blog/images/custom_notification_card.png",width:"80%"}),(0,r.kt)("p",null,"Sample code for rendering a custom notification item using the ",(0,r.kt)("inlineCode",{parentName:"p"},"renderNotificationBody")," prop is shown below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'<Engagespot\n      apiKey="tcyj57u29ferlgqt58qcl"\n      userId="user@codesanbox.io"\n      feedItemPlaceholderImage="https://cdn.iconscout.com/icon/premium/png-256-thumb/notification-165-723675.png"\n      theme={theme}\n      renderNotificationBody={(notification) => {\n        if (notification.data?.type === "invoice") {\n          return (\n            <>\n              <h5\n                style={{\n                  fontSize: "14px",\n                  padding: "0px",\n                  color: "#4f4b4b",\n                  marginBottom: "2px",\n                  fontWeight: "normal",\n                  fontSize: "14px"\n                }}\n                dangerouslySetInnerHTML={{ __html: notification.heading }}\n              ></h5>\n\n              <div>\n                <div style={{ width: "15%", float: "left" }}>\n                  <img\n                    style={{\n                      marginLeft: "-10px",\n                      width: "80%",\n                      borderRadius: "5px",\n                      paddingTop: "8px"\n                    }}\n                    src={notification.data.attachmentIcon}\n                    alt="icon"\n                  />\n                </div>\n                <div\n                  style={{\n                    width: "50%",\n                    float: "left",\n                    marginLeft: "-20px",\n\n                    paddingTop: "15px",\n                    fontSize: "13px"\n                  }}\n                >\n                  <a\n                    style={{ textDecoration: "none", color: "#3f62be" }}\n                    href={notification.data.downloadUrl}\n                  >\n                    {notification.data.filename}\n                  </a>\n                </div>\n                <div\n                  class="actionItems"\n                  style={{\n                    width: "25%",\n                    float: "right",\n                    paddingTop: "10px",\n                    fontSize: "14px"\n                  }}\n                >\n                  <a\n                    href="#"\n                    style={{\n                      width: "50px",\n                      borderRadius: "5px",\n                      display: "block",\n                      backgroundColor: "#3f62be",\n                      color: "#fff",\n                      textDecoration: "none",\n                      padding: "8px 10px",\n                      fontSize: "12px",\n                      marginBottom: "5px"\n                    }}\n                  >\n                    Pay Now\n                  </a>\n                </div>\n              </div>\n\n              <div>\n                <p style={{ fontSize: "0.7rem", color: "rgb(136, 136, 136)" }}>\n                  2m ago . Billing\n                </p>\n              </div>\n            </>\n          );\n        }\n      }}\n    />\n')))}c.isMDXComponent=!0},35318:function(n,t,e){e.d(t,{Zo:function(){return g},kt:function(){return u}});var i=e(27378);function r(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function o(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,i)}return e}function a(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?o(Object(e),!0).forEach((function(t){r(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):o(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function s(n,t){if(null==n)return{};var e,i,r=function(n,t){if(null==n)return{};var e,i,r={},o=Object.keys(n);for(i=0;i<o.length;i++)e=o[i],t.indexOf(e)>=0||(r[e]=n[e]);return r}(n,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(i=0;i<o.length;i++)e=o[i],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(r[e]=n[e])}return r}var l=i.createContext({}),p=function(n){var t=i.useContext(l),e=t;return n&&(e="function"==typeof n?n(t):a(a({},t),n)),e},g=function(n){var t=p(n.components);return i.createElement(l.Provider,{value:t},n.children)},c={inlineCode:"code",wrapper:function(n){var t=n.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(n,t){var e=n.components,r=n.mdxType,o=n.originalType,l=n.parentName,g=s(n,["components","mdxType","originalType","parentName"]),d=p(e),u=r,m=d["".concat(l,".").concat(u)]||d[u]||c[u]||o;return e?i.createElement(m,a(a({ref:t},g),{},{components:e})):i.createElement(m,a({ref:t},g))}));function u(n,t){var e=arguments,r=t&&t.mdxType;if("string"==typeof n||r){var o=e.length,a=new Array(o);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=n,s.mdxType="string"==typeof n?n:r,a[1]=s;for(var p=2;p<o;p++)a[p]=e[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,e)}d.displayName="MDXCreateElement"}}]);